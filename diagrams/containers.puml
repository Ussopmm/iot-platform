
@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

System_Boundary(platform, "IoT Monitoring Platform") {
    Container(keycloak, "Keycloak", "OAuth2", "Аутентификация и авторизация")
    Container(postgresql_keycloak, "PostgreSQL (Keycloak)", "Реляционная БД", "База данных для Keycloak")
    Container(postgresql_iot, "PostgreSQL IoT", "Реляционная БД", "Общая база данных для платформы IoT")
    Container(redis, "Redis", "In-memory cache", "Кэширование запросов")
    Container(cassandra_cluster, "Cassandra", "NoSQL", "Хранение событий")
    Container(kafka_cluster, "Kafka", "Брокер сообщений", "Топики: event / dlq / device-id")
    Container(minio, "MinIO", "Объектное хранилище", "Хранение артефактов/ошибок (DLQ)")

    Container_Ext(schema_registry, "Schema Registry", "Реестр схем Kafka")
    Container_Ext(kafka_ui, "Kafka UI", "Веб-интерфейс Kafka")

    Boundary(obs, "Observability") {
        Container(alloy, "Alloy", "Агент телеметрии", "Сбор и маршрутизация логов/метрик")
        Container(prometheus, "Prometheus", "TSDB", "Хранение/запрос метрик")
        Container(loki, "Loki", "Логи", "Хранение и поиск логов")
        Container(grafana, "Grafana", "UI", "Визуализация телеметрии")

        Container(redis_exporter, "Redis Exporter", "Exporter", "Метрики Redis")
        Container(kafka_exporter, "Kafka Exporter", "Exporter", "Метрики Kafka")
        Container(postgres_exporter, "PostgreSQL Exporter", "Exporter", "Метрики PostgreSQL")
    }
}

Rel(keycloak, postgresql_keycloak, "Читает/пишет")

Container_Ext(zookeeper, "Zookeeper", "Координация брокеров")
Rel(kafka_cluster, zookeeper, "Координация/метаданные")

Rel(redis_exporter, redis, "Collects metrics")
Rel(kafka_exporter, kafka_cluster, "Collects metrics")
Rel(postgres_exporter, postgresql_iot, "Collects metrics")
Rel(postgres_exporter, postgresql_keycloak, "Collects metrics")

Rel(prometheus, redis_exporter, "Scrapes /metrics")
Rel(prometheus, kafka_exporter, "Scrapes /metrics")
Rel(prometheus, postgres_exporter, "Scrapes /metrics")

Rel(grafana, prometheus, "Queries metrics")
Rel(grafana, loki, "Queries logs")

Rel(alloy, loki, "Отправка логов")
Rel(alloy, prometheus, "remote_write (если используется)")

Rel(kafka_ui, kafka_cluster, "Просмотр/управление топиками")

@enduml
