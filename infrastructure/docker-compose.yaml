version: '3.9'

services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iot-platform-net

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iot-platform-net

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    environment:
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status > /dev/null 2>&1 && cqlsh -e 'describe keyspaces' > /dev/null 2>&1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 2m # time before cassandra should be initialized
    networks:
      - iot-platform-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      interval: 10s
      timeout: 5s
      retries: 5
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
    volumes:
      - /var/lib/kafka/data
    networks:
      - iot-platform-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    volumes:
      - schema_registry_data:/etc/schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ${SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS}
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST_NAME}
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/subjects" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8070:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080" ]
      interval: 10s
      timeout: 5s
      retries: 5


  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      retries: 3
    networks:
      - iot-platform-net

  keycloak-postgres:
    image: postgres:17
    container_name: keycloak-postgres
    environment:
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - keycloak_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iot-platform-net

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KC_HOSTNAME: "localhost"
      KC_HTTP_MANAGEMENT_PORT: 9002
      KC_HOSTNAME_STRICT: "false"
      KC_PROXY: "edge"

      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev --metrics-enabled=true
    ports:
      - "8080:8080"
      - "9002:9002"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:9000/health/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - iot-platform-net


# Does not need it yet
#  camunda:
#    image: camunda/camunda-bpm-platform:latest
#    container_name: camunda
#    ports:
#      - "8088:8088"
#    environment:
#      DB_DRIVER: org.postgresql.Driver
#      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
#      DB_USERNAME: ${POSTGRES_USER}
#      DB_PASSWORD: ${POSTGRES_PASSWORD}
#    depends_on:
#      postgres:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8088/camunda/app/welcome/default/"]
#      interval: 30s
#      retries: 3
#    networks:
#      - iot-platform-net

  #Observability stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_METRICS_ENABLED: "true"
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - iot-platform-net
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - grafana-storage:/var/lib/grafana
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://user:password@postgres:5432/events_db?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    restart: unless-stopped
    command:
      - "--kafka.server=kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9308/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_EXPORTER_INCL_SYSTEM_METRICS: "true"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - iot-platform-net


  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    user: "root"
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki_chunks:/tmp/loki/chunks
      - loki_index:/tmp/loki/index
      - loki_rules:/tmp/loki/rules
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080"  # HTTP-интерфейс Alloy (по умолчанию)
      - "4317:4317"   # OTLP gRPC (важно!)
      - "4318:4318"   # OTLP HTTP (если нужен)
    volumes:
      - ./monitoring/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: ${GRAFANA_LOKI_URL}
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - iot-platform-net
    depends_on:
      loki:
        condition: service_healthy
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    depends_on:
      - create-tempo-bucket
    volumes:
      - ./monitoring/tempo/tempo.yaml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"
    networks:
      - iot-platform-net

  create-tempo-bucket:
    image: minio/mc
    container_name: create-tempo-bucket
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        sleep 10 && \
        mc alias set minio http://minio:9000 minio user-user && \
        mc mb -p minio/tempo && \
        mc anonymous set download minio/tempo
      "
    networks:
      - iot-platform-net

  event-collector-service:
    build:
      context: ../event-collector-service/
      dockerfile: Dockerfile
    container_name: event-collector-service
    ports:
      - "9099:9099"
    environment:
      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      SCHEMA_REGISTRY_URL: ${SCHEMA_REGISTRY_URL}
      ALLOY_URL: ${ALLOY_URL}
      CASSANDRA_DATABASE_URL: ${CASSANDRA_DATABASE_URL}
    networks:
      - iot-platform-net
    depends_on:
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9099/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  nexus:
    image: sonatype/nexus3:3.76.0
    container_name: nexus
    ports:
      - "8081:8081"
    environment:
      NEXUS_SECURITY_INITIAL_PASSWORD: admin
      NEXUS_SECURITY_RANDOMPASSWORD: "false"
      INSTALL4J_ADD_VM_PARAMS: >
        -Dnexus.sslTrustAll=true
        -Djavax.net.ssl.trustAll=true
        -Dcom.sun.net.ssl.checkRevocation=false
        -Dhttps.protocols=TLSv1.2
        -Dnexus.skipNpmPeerDependenciesCheck=true
    volumes:
      - nexus-data:/nexus-data

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status" ]
      interval: 5s
      timeout: 10s
      retries: 30
    networks:
      - iot-platform-net

  avro-schemas:
    build:
      context: ../avro-schemas/
      dockerfile: Dockerfile
    ports:
      - "9097:9097"
    environment:
      NEXUS_URL: ${NEXUS_URL}
      NEXUS_USERNAME: ${NEXUS_USERNAME}
      NEXUS_PASSWORD: ${NEXUS_PASSWORD}
    networks:
      - iot-platform-net
    depends_on:
      nexus:
        condition: service_healthy


volumes:
  minio_data:
  pg_data:
  redis_data:
  cassandra_data:
  schema_registry_data:
  zookeeper_data:
  zookeeper_log:
  keycloak_data:
  keycloak_pg_data:
  grafana-storage:
  loki_chunks:
  loki_index:
  loki_rules:
  tempo_data:
  nexus-data:

networks:
  iot-platform-net:
    driver: bridge
